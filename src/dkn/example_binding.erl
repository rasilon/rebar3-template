% Autogenerated with DRAKON Editor 1.31

-module(example_binding).
-export([delete/3, get/3, head/3, init/3, post/3, put/3, terminate/4]).
-compile({parse_transform,leptus_pt}).
-define(Route,"/narf/:potato").

delete(?Route, Req, State) ->
    % item 93
    Potato = binary:bin_to_list(cowboy_req:binding(potato,Req)),
    % item 94
    io:format("Received delete for ~p~n",[Potato]),
    % item 95
    {ok,"Received delete for " ++ Potato ++ "\n",State}
.

get(?Route, Req, State) ->
    % item 73
    Potato = binary:bin_to_list(cowboy_req:binding(potato,Req)),
    % item 74
    io:format("Potato: ~p~n",[Potato]),
    Body = "Potato " ++ Potato ++ "\n",
    % item 71
    {ok,Body,State}
.

get_body(Req, BodySoFar) ->
    % item 114
    {Cont,Body,_} = cowboy_req:read_body(Req),
    % item 120
    NewBody = <<BodySoFar/binary,Body/binary>>,
    case Cont of
        ok ->
            % item 125
            io:format("Received final chunk~n",[]),
            % item 121
            {ok,NewBody}
        ;
        more ->
            % item 124
            io:format("Received intermediate chunk~n"),
            % item 122
            get_body(Req,NewBody)
    end
.

head(?Route, Req, State) ->
    % item 146
    Potato = binary:bin_to_list(cowboy_req:binding(potato,Req)),
    % item 147
    io:format("Potato: ~p~n",[Potato]),
    % item 144
    {ok,<<>>,State}
.

init(Route, Req, State) ->
    % item 132
    io:format("Init:~n  Route: ~p~n  State: ~p~n",
        [Route,State]),
    % item 131
    {ok,State}
.

post(?Route, Req, State) ->
    % item 80
    io:format("Post called~n  Req: ~p~n  State: ~p~n",[Req,State]),
    % item 82
    case cowboy_req:has_body(Req) of true -> 
        % item 87
        {ok,Body} = get_body(Req,<<>>),
        % item 85
        io:format("Body Length:~n ~p~n",[length(Body)])
    ; false ->
        % item 86
        io:format("No body found~n",[])
    end,
    % item 81
    {ok,<<"Posted\n">>,State}
.

put(?Route, Req, State) ->
    % item 101
    io:format("PUT called~n  Req: ~p~n  State: ~p~n",[Req,State]),
    % item 103
    case cowboy_req:has_body(Req) of true -> 
        % item 108
        {ok,Body} = get_body(Req,<<>>),
        % item 106
        io:format("Body Length:~n ~p~n",[length(Body)])
    ; false ->
        % item 107
        io:format("No body found~n",[])
    end,
    % item 102
    {ok,<<"Posted\n">>,State}
.

terminate(_Reason, _Route, _Req, _State) ->
    % item 138
    ok
.


